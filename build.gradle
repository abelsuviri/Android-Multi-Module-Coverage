// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext.versions = [
            'compileSdk'           : 31,
            'minSdk'               : 23,
            'targetSdk'            : 31,
            'androidxjunit'         : '1.1.3',
            'appCompat'             : '1.4.0',
            'constraintLayout'      : '2.1.2',
            'coreTesting'           : '2.1.0',
            'jacoco'                : "0.8.7",
            'junit'                 : '4.12',
            'kotlin'                : '1.6.0',
            'material'              : '1.4.0',
            'mockk'                 : '1.12.2',
            'navigation'            : '2.3.5',
    ]

    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:7.0.4"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.0"
        classpath "org.jacoco:org.jacoco.core:${versions.jacoco}"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id "jacoco"
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task testDebugUnitTest() {
    rootProject.getSubprojects().findAll { it.name.contains('Domain') }.each { subModule ->
        subModule.afterEvaluate { testDebugUnitTest.dependsOn subModule.tasks.named('test').get() }
    }
}

task jacocoTestReport() {
    rootProject.getSubprojects().findAll { it.name.contains('Domain') }.each { subModule ->
        subModule.afterEvaluate { jacocoTestReport.dependsOn subModule.tasks.named('test').get() }
    }
}

task jacocoFullReport(type: JacocoReport, group: 'Coverage reports') {
    group = 'Verification'
    description = 'Generate Jacoco aggregate report for all modules'

    def projects = subprojects.findAll { it.getTasksByName("jacocoTestReport", false) }

    dependsOn(projects.jacocoTestReport)

    final source = files(projects.jacocoTestReport.sourceDirectories)

    additionalSourceDirs.setFrom source
    sourceDirectories.setFrom source

    classDirectories.setFrom files(projects.jacocoTestReport.classDirectories)
    executionData.setFrom files(projects.jacocoTestReport.executionData).findAll { it.exists() }

    reports {
        csv {
            enabled true
            destination file("${buildDir}/reports/jacoco/csv/report.csv")
        }
        html {
            enabled true
            destination file("${buildDir}/reports/jacoco/html")
        }
        xml {
            enabled true
            destination file("${buildDir}/reports/jacoco/xml/report.xml")
        }
    }
}

task jacocoTestCoverageVerification(type: JacocoCoverageVerification, dependsOn: 'jacocoTestReport') {
    group = 'Verification'
    description = 'Check that test coverage is over 85% and fail if not'

    def projects = subprojects.findAll { it.getTasksByName("jacocoTestReport", false) }

    dependsOn(projects.jacocoTestReport)

    final source = files(projects.jacocoTestReport.sourceDirectories)

    additionalSourceDirs.setFrom source
    sourceDirectories.setFrom source

    classDirectories.setFrom files(projects.jacocoTestReport.classDirectories)
    executionData.setFrom files(projects.jacocoTestReport.executionData)

    violationRules {
        failOnViolation = true
        rule {
            limit {
                minimum = 0.85
            }
        }
    }
}
